#! /bin/bash

VMFORMAT=vmdk;
TYPE="";
NAME="";
ARCHI=amd64;
SIZE="5G";
DEBIANVERSION="jessie"
BRANCH="";
EXTRAPACKAGES="";
REMOVEPACKAGES="";
TMPNAME="tmp`date +%s`";
REMOVE="yes";
COSYREPO="http://cosyverif-debian.lip6.fr jessie-testing/";
DEBUGMODE=false;
VERBOSEMODE=false;
DOCKERFILESDIR="dockerfiles";
DOCKERFILES="";
KEYSDIR="data/home/repo/.ssh/";
KERNEL_DONE=false;

usage(){
    scripts/color_help.pl << EOF
Usage : $0 [OPTIONS]
Creates docker images or virtual disks.
** You have to be root in order to execute this command ! **

Options :
 -a <archi>, --arch=ARCH, --architecture=ARCH  
      Architecture. It can either be amd64 or i386. Default: $ARCHI
 -b <branch>, --branch=BRANCH 
      What kind of docker image/vm you want to  create. It can be one of the  8
      following value:
        debian
          Create a virtual disk/docker image containing a debian system without
          a kernel (unless  you  want  to  create a virtual disk image. In that
          case, there will be a kernel). Dockerfiles used: none.
        cosy   
          Create a minimal virtual disk image with a kernel, and a  user  named
          'cosyverif'. Dockerfiles   used:   without-recommends,   with-kernel,
          with-cosy.
        buildeb 
          Create a minimal virtual disk/docker image  which  contains  all  the
          dependencies   of   buildeb. Dockerfiles  used:   without-recommends,
          with-minimal, with-buildeb.
        kernel 
          Create a virtual disk/docker image with a kernel. Dockerfiles used:
          with-kernel.
        minimal
          Create a minimal virtual disk/docker image. It means that  there  are
          no  manpages  and   no   documentation  installed. Dockerfiles  used:
          without-recommends, with-minimal.
        repo
          Create a minimal virtual disk image which  contains  a kernel and all
          the software (correctly configured) one might need to  setup a debian
          repository.  Dockerfiles   used:   without-recommends,  with-minimal,
          with-kernel, with-repo.
        jenkins-slave 
           Create a minimal virtual disk image  which  contains  a  kernel  and
           everything  you  need  to  setup  a jenkins slave. Dockerfiles used:
           without-recommends, with-minimal, with-kernel, with-jenkins-slave.
        without-recommends 
           Create a virtual disk/docker image which doesn't install recommended
           or  suggested   packages  when   you  want  to  install  a  package.
           Dockerfiles used: without-recommends.
        custom:DOCKERFILES
           Create a custom virtual disk/docker image. You can choose to use any
           dockerfile you want, as long as they're in the following  directory:
           $DOCKERFILESDIR.
           You can choose where this script will look for dockerfiles by  using
           -d or --directory. The  list  of  dockerfiles  must  be written like
           this: custom:dockerfile1,dockerfile2,dockerfile3,...
      ** This option is mandatory unless  you  use  --custom  or  --dockerfiles
      (which   is   actually  the  same   as  using  -b  custom:DOCKERFILES  or
       --branch=custom:DOCKERFILES) **
 --custom=DOCKERFILES, --dockerfiles=DOCKERFILES
      List  of  dockerfiles  you  want to apply in order to create your virtual
      disk/docker image. The list must be written like that: 
      dockerfile1,dockerfile2,dockerfile3,...
      The dockerfiles will be applied according to their position in  the  list
      (i.e. dockerfile1 will be executed, then dockerfile2, and so on ...).
      Here is the list of dockerfile you will find in the default directory:
        clean
           This dockerfile will  remove  unnecessary  packages,  all  temporary
           files and all *.deb files downloaded by apt-get. This  dockerfile is
           always executed before creating the final docker image  (or  virtual
           disk image), so you don't really have to put it on your list.
        install-extrapackages
           This dockerfile will install extra packages. If you want to  use  it
           you have to use -p  (or --packages, --install ...)  to  define  what
           packages you want to add. However, if you use -p (or --package, ...)
           the script will automatically execute this dockerfile  right  before
           creating the final docker image/virtual disk. If you want to execute
           it at another time, then you should put it  in  your  list. In  that
           case, the script won't execute it at the end.
        remove-packages
           This dockerfile will remove packages. To indicate what packages  you
           want to remove, you have to use --remove-packages. If you  don't use
           it, no packages will  be  removed. Like  install-extrapackage,  this
           dockerfile is normally executed at the end  of  the  script. If  you
           want to execute it at another time, you should put it on your list.
        with-buildeb
           This dockerfile will install all the dependencies of  buildeb. It'll
           not install buildeb. 
        with-cosy
           Dockerfile that creates an user named cosy.
        with-jenkins-slave
           Dockerfile that install and configure all the software you  need  to
           create a  jenkins  slave. It  installs  buildeb,  slave-cosy  (which
           contains all the scripts needed to build  and  create  packages  via
           jenkins), docker.io and creates an  user  named  'jenkins'. It  also
           adds an authorized_keys file in the directory /usr/home/jenkins/.ssh
           of the docker image/virtual disk. You  can  find  this  file  in the
           directory $KEYSDIR. 
        with-kernel
           Dockerfile that compiles a linux kernel and install a bootloader. It
           also adds a password for root  (which is toor). This  dockerfile  is
           mandatory if you want to create a vm. If you don't put  it  on  your
           list, this script will execute it anyway. Consider yourself warned.
        with-minimal
           Dockerfile that forces apt-get  to  exclude  some  directories  when
           installing packages. Thus, apt-get won't be able to create files  in
           those directories. The list of excluded directories can  be found in
           the file data/etc/dpkg/dpkg.cfg.d/01_nodoc. This allows us to reduce
           the size of  installed  packages. This  dockerfile  also  reinstalls
           every packages installed (in order to apply those  modifications  to
           packages that have already  been  installed). We  recommend  you  to
           execute this dockerfile before any other dockerfile that may install
           packages, because this one takes quite some time.
        without-recommends
           This  Dockerfile  will  force  apt-get to never download and install
           suggested or recommended packages (which aren't mandatory  at  all).
        with-repo
           This Dockerfile installs and configures all the software you need to
           setup a debian repository. This includes: apache, mini-dinstall, and
           dput. The configuration files used to configure those softwares  are
           located    in   data/etc/apache2/sites-available/   (for   apache2),
           data/home/repo/.ssh  (for  ssh), and  data/home/repo/  (for dput and
           mini-dinstall). We  highly  recommend you to look at those files and
           fill them correctly. This  dockerfile  also  creates  an  user named
           'repo' and generates a key for the repo, which will be used to  sign
           packages.  
 -d <directory>, --directory=DIR, --dockerfiles-dir=DIR
      Path  leading  to  the  directory  that contains all dockerfiles. Default
      value: $DOCKERFILESDIR.
 -D, --debug, --debug-mode
      Debug mode. 
 -f <format>, --format=FORMAT, --vm-format=FORMAT, --format-vm=FORMAT 
      Indicate what type of virtual disk image to create. Can be  one of these:
      vmdk, qcow2, qcow, raw. Default: $VMFORMAT.
      If you want to build a docker image, you must not use this option.
 -h, --help       
      Print this
 -n <name>, --name=NAME
      The name you want to give to your docker image or your vm.
 -p <packages>, --install=PACKAGES, --extra-packages=PACKAGES,
  --packages=PACKAGES
      List of packages you want to install in the resulting virtual disk/docker
      image. The list of packages must be written like this: 
      package1,package2,package3,...
 -r <yes/no>, --remove=yes/no  
      (Do or Don't) Remove temporary  docker images  and  files. Default value:
      $REMOVE. It means that temporary files and docker images will be removed
 -R <repo>, --repository=REPO, --repo=REPO, --cosy-repo=REPO
      Address  of  the  debian  repository where are located all the  cosyverif
      related packages. It must follow this pattern: <repo_address>,<section>. 
      Default: $COSYREPO
      **<section> MUST be coherent with the debian version you want to use.** 
 --remove-packages=PACKAGES
      List  of  packages  to  remove in the virtual disk/docker image. The list
      must be in the written like this : package1,package2,package3,...
 -s <size>, --size=SIZE, --vmsize=SIZE, --sizevm=SIZE 
      Size of the virtual disk image. Default : $SIZE.
 -t <type>, --type=TYPE
      Indicate what you want to create. <type> can be one of these:
        image: A docker image will be created
        vm: A virtual disk image will be created.
      ** This option is mandatory. **
 -v <version>, --version=VER, --debian-version=VER, --release=VER
      What Debian  version you  want to use to create your docker image or your
      virtual  disk  image.  It  must  either  be a release code name (squeeze,
      wheezy, ...) or a symbolic name (stable, testing, unstable, ...). Default
      value: $DEBIANVERSION.
 -V, --verbose, --verbose-mode
      Verbose mode
EOF
}

are_you_root () {
    [ ${EUID:=1000} -ne 0 ] && {
	echo "Error: You have to be root to run this script" >&2 ;
	exit 1 ;
    }
}

verbose_mode () {
    [ $VERBOSEMODE = true ] && {
	cat
    } || {
	cat >> /dev/null
    }
}

do_dockerfile () {
    dockerfile_name=$1;
    cp $DOCKERFILESDIR/$dockerfile_name Dockerfile;
    perl -pi -e 's/BASE_IMAGE/'"$TMPNAME"'/;' Dockerfile;
    case $dockerfile_name in
	install-extrapackages)
	    perl -pi -e 's/PACKAGES/'"$EXTRAPACKAGES"'/;' Dockerfile;
	    perl -pi -e 's!REPOSITORY SUITE!'"$COSYREPO"'!;' Dockerfile;
	    COSYTMP="`echo $COSYREPO | cut -d' ' -f1`";
	    COSYTMP="`echo "$COSYTMP" | perl -ne 'print $1 if /^(.+)\/?/;'`";
	    perl -pi -e 's!REPOSITORY!'"$COSYTMP"'!;' Dockerfile;;
	remove-packages)
	    perl -pi -e 's/PACKAGES/'"$REMOVEPACKAGES"'/;' Dockerfile;;
	clean)
	    docker.io rmi -f $(docker.io images | grep "^<none>" | awk \
		'{print $3}') 2>/dev/null | verbose_mode;;	
	with-repo | with-jenkins-slave)
	    perl -pi -e 's!REPOSITORY SUITE!'"$COSYREPO"'!;' Dockerfile;
	    COSYTMP="`echo $COSYREPO | cut -d' ' -f1`";
	    COSYTMP="`echo "$COSYTMP" | perl -ne 'print $1 if /^(.+)\/?/;'`";
	    perl -pi -e 's!REPOSITORY!'"$COSYTMP"'!;' Dockerfile;;
	with-kernel)
	    KERNEL_DONE=true;;
	*)
	    echo ;;
    esac

    echo "Executing dockerfile $dockerfile_name ..."
    docker build -t $TMPNAME . | verbose_mode;
    [ ${PIPESTATUS[0]} -ne 0 ] && {
	echo "An error occured while executing dockerfile $dockerfile_name">&2;
	echo "Run the script with -v -D for more informations">&2;
	exit 1;
    }

    docker export $(docker run -d $TMPNAME echo)  | docker import - $TMPNAME
    rm Dockerfile;
    echo "Dockerfile $dockerfile_name successfuly executed !";
    docker.io rm -f $(docker.io ps -a -q) 2>/dev/null | verbose_mode;
}

do_debian () {
    echo "Downloading Debian ...";
    /usr/share/docker.io/contrib/mkimage-debootstrap.sh \
	-v minbase \
	-a $ARCHI \
	-t debiantarball.createimvm.tmp.tar \
	$DEBIANVERSION \
	http://http.debian.net/debian | verbose_mode
    [ ${PIPESTATUS[0]} -ne 0 ] && {
	echo "An error occured while downloading debian."\>&2;
	echo "Run the script with -v -D for more informations">&2;
	exit 1;
    }

    echo "Debian has been successfuly downloaded";
    cat debiantarball.createimvm.tmp.tar | docker import - $TMPNAME >>/dev/null
    [ "$REMOVE" == "yes" ] && {
	rm debiantarball.createimvm.tmp.tar;
    }

    echo "Removing useless packages";
    do_dockerfile remove-useless-packages;
    echo "Useless packages removed !";
}

create_final_image () {
    echo "Creating image $NAME ...";
    docker.io export $(docker.io run -d $TMPNAME echo) | \
	docker.io import - $NAME >/dev/null | verbose_mode
    echo "Image $NAME created !";
    docker.io rm -f $(docker.io ps -a -q) 2>/dev/null | verbose_mode;
    [ "$REMOVE" == "yes" ] && {
	docker.io rmi -f $TMPNAME | verbose_mode;
    }
}

create_vm () {
    echo "Exporting docker image ..."
    docker.io run -d $TMPNAME echo |xargs docker export > $NAME.tar
    echo "docker image successfuly exported";

    docker.io rm -f $(docker.io ps -a -q) 2>/dev/null | verbose_mode;
    [ "$REMOVE" == "yes" ] && {
	docker.io rmi -f $TMPNAME | verbose_mode;
    }

    echo "Compressing tarball ...";
    gzip $NAME.tar;
    echo "Tarball compressed !";
    echo "Creating virtual disk image ...";
    
    [ $VERBOSEMODE = true ] && {
	[ $DEBUGMODE = true ] && {
	    genvmopts="-v -D";
	} || {
	    genvmopts="-v";
	}
    } || {
	[ $DEBUGMODE = true ] && {
	    genvmopts="-D";
	} || {
	    genvmopts="";
	}	
    }

    genvm $genvmopts -a $ARCHI -d $NAME.tar.gz -e -f $VMFORMAT -s $SIZE $NAME
    [ $? -ne 0 ] && {
	echo "An error occured while creating the virtual disk image">&2;
	echo "Run the script with -v -D for more informations">&2;
	exit 1;
    }

    echo "Virtual disk image successfuly created !";
    [ "$REMOVE" == "yes" ] && {
	rm -rf $NAME.tar.gz;
    }
}

f_seen=false;
s_seen=false;
b_seen=false;
custom_seen=false;
[ $# -eq 0 ] && {
    echo "You can't use this script without arguments">&2;
    echo "Use $0 --help for more informations">&2;
    exit 1;
}

while [ ! -z "$1" ]
do
    case $1 in 
	-a)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&&  {
		echo "Error: -a option requires an argument">&2;
		exit 1;
	    }
	    [[ "$2" != "amd64" && "$2" != "i386" ]] && {
		echo "Error: Unknown architecture $2";
		exit 1;
	    } 
	    ARCHI=$2;
	    shift 2;;
	--arch=*|--architecture=*)
	    ARCHI=${1#--*=};
	    [[ "$ARCHI" != "amd64" && "$ARCHI" != "i386" ]] && {
		echo "Error: Unknown architecture $ARCHI";
		exit 1;
	    } 
	    shift;;
	-b)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -b option requires an argument">&2;
		exit 1;
	    }
	    case $2 in
		debian | cosy | buildeb | kernel | minimal | repo |\
                jenkins-slave | without-recommends) 
		    BRANCH="$2";;
		custom:*)
		    BRANCH="custom";
		    DOCKERFILES=${2#custom:};
		    DOCKERFILES="$(echo "$DOCKERFILES" | tr , ' ')";;
		*)
		    echo "Error: Unknown branch $2">&2;
		    exit 1;;
	    esac
	    b_seen=true;
	    shift 2;;
	--branch=*)
	    BRANCH=${1#--*=};
	    case $BRANCH in
		debian | cosy | buildeb | kernel | minimal | repo |\
                jenkins-slave | without-recommends) 
		    shift;;
		custom:*)
		    DOCKERFILES=${BRANCH#custom:};
		    BRANCH="custom";
		    DOCKERFILES="$(echo "$DOCKERFILES" | tr , ' ')";
		    shift;;
		*)
		    echo "Error: Unknown branch $BRANCH">&2;
		    exit 1;;
	    esac;;
	--custom=* | --dockerfiles=*)
	    DOCKERFILES=${1#--*=};
	    DOCKERFILES="$(echo "$DOCKERFILES" | tr , ' ')";
	    BRANCH=custom;
	    custom_seen=true;
	    shift;;
	-d)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -d option requires an argument">&2;
		exit 1;
	    }
	    [ ! -d $2 ] && {
		echo "Directory $2 doesn't exist">&2;
		exit 1;
	    }
	    DOCKERFILESDIR=${2%/};
	    shift 2;;
	--directory=* | --dockerfiles-dir=*)
	    DOCKERFILESDIR=${1#--*=};
	    [ ! -d "$2" ] && {
		echo "Directory $DOCKERFILESDIR doesn't exist">&2;
		exit 1;
	    }
	    DOCKERFILESDIR=${DOCKERFILESDIR%/};
	    shift;;
	-D|--debug|--debug-mode)
	    DEBUGMODE=true;
	    set -x;
	    shift;;
	-f)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -f option requires an argument">&2;
		exit 1;
	    }
	    
	    case $2 in
		vmdk | qcow | qcow2 | raw) 
		    VMFORMAT="$2";;
		*)
		    echo "Error: Unknown virtual disk image format $2">&2;
		    exit 1;;
	    esac
	    f_seen=true;
	    shift 2;;
	--format=* | --vm-format=* | --format-vm=*)
	    VMFORMAT=${1#--*=};
	    case $VMFORMAT in
                vmdk | qcow | qcow2 | raw) 
		    shift 1;;
		*)
		    echo "Error: Unknown virtual disk image format $VMFORMAT"\
                    >&2;
		    exit 1;;
	    esac;;
	-h | --help)
	    usage;
	    exit 0;;
	-n)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -n option requires an argument">&2;
		exit 1;
	    }
	    NAME="$2";
	    shift 2;;
	--name=*)
	   NAME=${1#--*=};
	   [ -z "$NAME" ] && {
	       echo "Error: Invalid name for --name">&2;
	       exit 1;
	   } || { 
	       shift 1;
	   }
	   ;;
	-p)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -p option requires an argument">&2;
		exit 1;
	    }
	    EXTRAPACKAGES="$(echo "$2" | tr , ' ')";
	    shift 2;;
	--install=* | --extra-packages=* | --packages=*)
	   EXTRAPACKAGES=${1#--*=};
	   [ -z "$EXTRAPACKAGES" ] && {
	       echo "Error: Invalid list of packages for ${1%=*}">&2;
	       exit 1;
	   } || { 
	       EXTRAPACKAGES="$(echo "$EXTRAPACKAGES" | tr , ' ')";
	       shift 1;
	   }
	   ;;
	-r)    
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -r option requires an argument">&2;
		exit 1;
	    }
	   case $2 in
	       yes | y | true)
		   REMOVE="yes";;
	       no | n | false)
		   REMOVE="no";;
	       *)
		   echo"Error: Invalid value $2 for -r option">&2;
		   exit 1;;
	   esac
	   shift 2;;
	--remove=*)
	    REMOVE=${1#--*=};
	    case $REMOVE in
		yes | y | true)
		    REMOVE="yes";;
		no | n | false)
		    REMOVE="no";;
		*)
		   echo"Error: Invalid value $REMOVE for -r option">&2;
		   exit 1;;
	    esac
	    shift;;	
	-R)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -R option requires an argument">&2;
		exit 1;
	    }
	    COSYREPO="$(echo "$2" | tr , ' ');"
	    shift 2;;
	--repository=* | --repo=* | --cosy-repo=*)
	    COSYREPO=${1#--*=};
	    COSYREPO="$(echo "$COSYREPO" | tr , ' ')";
	    shift;;
	--remove-packages=*)
	    REMOVEPACKAGES=${1#--*=};
	    [ -z "$REMOVEPACKAGES" ] && {
		echo "Error: The list of packages can't be empty">&2;
		exit 1; 
	    }
	    REMOVEPACKAGES="$(echo "$REMOVEPACKAGES" | tr , ' ')";
	    shift;;
	-s)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -s option requires an argument">&2;
		exit 1;
	    }
	    SIZE="$2";
	    s_seen=true;
	    shift 2;;
	--size=* | --vmsize=* | --sizevm=*)
	    SIZE={$1#--*=};
	    [ -z "$SIZE" ] && {
		echo "Error: Invalid size for ${1%=*} option">&2;
		exit 1;
	    } || {
		s_seen=true;
		shift;
	    }
	    ;;
	-t)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -t option requires an argument">&2;
		exit 1;
	    }
	    [[ "$2" != "image" && "$2" != "vm" ]] && {
		echo "Error: Unknown type $2 for -t option">&2;
		exit 1;
	    }
	    TYPE=$2;
	    shift 2;;
	--type=*)
	    TYPE=${1#--*=};
	    [[ "$TYPE" != "image" && "$TYPE" != "vm" ]] && {
		echo "Error: Unknown type $TYPE for --type option">&2;
		exit 1;
	    }
	    shift;;
	-v)
	    ([ -z "$2" ] || [[ "$2" =~ ^-[a-zA-Z] || "$2" =~ ^--[a-zA-Z]* ]]) \
		&& {
		echo "Error: -v option requires an argument">&2;
		exit 1;
	    }
	    
	    [[ "$2" =~ ^([0-9]+\.?)+$ ]] && {
		echo "Error: You can't use a version number for -v">&2;
		exit 1;
	    }
	    DEBIANVERSION="$2";
	    shift 2;;
	--version=* | --debian-version=* | --release=*)
	    DEBIANVERSION=${1#--*=};
	    [[ "$2" =~ ^([0-9]+\.?)+$ ]] && {
		echo "Error: You can't use a version number for -v">&2;
		exit 1;
	    }
	    shift;;
	-V | --verbose | --verbose-mode)
	    VERBOSEMODE=true;
	    shift;;
	--*)
	    echo "Unknown option ${1%=*}">&2;
	    echo "Use $0 --help for more informations">&2;
	    exit 1;;
	-*)
	    echo "Unknown option $1">&2;
	    echo "Use $0 --help for more informations">&2;
	    exit 1;;
	*)
	    exit;;
    esac
done;


if [ -z "$TYPE" ]
then
    echo "Error: You haven't specified what you want to create">&2;
    echo "Error: You have to use -t">&2;
    exit 5;
fi

if [ -z "$BRANCH" ]
then
    echo "Error: You haven't specified what kind of $TYPE you want to create"\
>&2;
    echo "Error: You have to use -b to specify it."
    exit 6;
fi

[[ $b_seen = true && $custom_seen = true ]] && {
    echo "Error: You can't use -b (or --branch) and --custom \
(or --dockerfiles) simultaneously">&2;
    exit 1;
}

for dock in $DOCKERFILES
do
    [ ! -f "$DOCKERFILESDIR/$dock" ] && {
	echo "Error: Couldn't find dockerfile $dock in $DOCKERFILESDIR/";
	exit 1;
    } || {
	echo "Dockerfile $dock found !";
    }
done;

if [ "$TYPE" == "image" ] && [ $f_seen = true ]
then
    echo "Warning: You want to build a docker image, you shouldn't use -f";
    echo "Warning: -f option ignored";
fi

if [ "$TYPE" == "image" ] && [ $s_seen = true ]
then
    echo "Warning: You want to build a docker image, you shouldn't use -s";
    echo "Warning: -s option ignored";
fi

are_you_root;

if [ -z "$NAME" ]
then
    if [ "$TYPE" == "image" ]
    then
	NAME="$BRANCH:$DEBIANVERSION-$ARCHI";
    else 
	NAME="$BRANCH.$DEBIANVERSION.$ARCHI.$VMFORMAT";
    fi
fi
 
do_debian;

case $BRANCH in
    debian)
	: ;;
    without-recommends)
	do_dockerfile without-recommends;;	
    minimal)
	do_dockerfile without-recommends;
	do_dockerfile with-minimal;;
    kernel)
	do_dockerfile with-kernel;;
    buildeb)
	do_dockerfile without-recommends;
	do_dockerfile with-minimal;
	do_dockerfile with-buildeb;;
    repo)
	do_dockerfile without-recommends;
	do_dockerfile with-minimal;
	do_dockerfile with-kernel;
	do_dockerfile with-repo;;
    jenkins-slave)
	do_dockerfile without-recommends;
	do_dockerfile with-minimal;
	do_dockerfile with-kernel;
	do_dockerfile with-jenkins-slave;;
    cosy)
	do_dockerfile without-recommends;
	do_dockerfile with-kernel;
	do_dockerfile with-cosy;;
    custom)
	for dock in $DOCKERFILES
	do
	    do_dockerfile $dock;
	done;
	;;
    *)
	echo "should not be";;
esac

if [ ! -z "$EXTRAPACKAGES" ]
then
    do_dockerfile install-extrapackages;
fi

[ ! -z "$REMOVEPACKAGES"] && {
    do_dockerfile remove-packages;
}

do_dockerfile clean;

if [ "$TYPE" == "image" ]
then
    create_final_image;
else
    [ $KERNEL_DONE = false ] && {
	do_dockerfile with-kernel;
	do_dockerfile clean;
    } 
    create_vm;
fi
